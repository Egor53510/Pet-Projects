from aiogram import Bot, Dispatcher, _asyncio, types
from aiogram.filters import Command

import string, random

import config, buttons
#pytontelegram telethon pyrogram

HELP_COMMAND = """
<strong>help</strong> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<strong>start</strong> - <em>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</em>
<strong>description</strong> - <em>–æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞</em>
<strong>give</strong> - <em>–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä</em>
<strong>–∫–∞—Ä—Ç–∏–Ω–∫–∞</strong> - <em>–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞—Å—Ç–∞–≤–∫–∏ –¥–æ—Ç—ã</em>
GAIZENBERG_TOKIOGHOU _DEANHNOTEN=intelCOREi5#gg
"""


bot = Bot(config.TOKEN_API)
dp = Dispatcher()

async def on_startup():
    print("–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

@dp.message(Command("help"))
async def help_command(messege: types.Message):
    await bot.send_message(chat_id=messege.from_user.id, 
                           text=HELP_COMMAND, 
                           parse_mode="HTML",
                           reply_markup=buttons.keyboard_help())
    await messege.delete()

@dp.message(Command("start"))
async def start_command(messege: types.Message):
    await messege.answer(text='<em>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç!</em>', 
                         parse_mode="HTML",
                         reply_markup=buttons.keyboard_start())
    await messege.delete()

@dp.message(Command("description"))
async def desc_command(messege: types.Message):
    await messege.answer(text="–î–∞–Ω–Ω—ã–π –Ω–∞–≤–µ—Ä–Ω–æ–µ —á—Ç–æ-—Ç–æ —É–º–µ–µ—Ç, –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)")
    await messege.delete()

@dp.message(Command("give"))
async def give_sticker(messege:types.Message):
    await messege.answer(text="–°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π –∫–ª–æ—É–Ω " + "‚ù§Ô∏è")
    await bot.send_sticker(messege.from_user.id, 
                           sticker=config.STICKER_shadow_fiend)
    await messege.delete()

@dp.message(Command("–∫–∞—Ä—Ç–∏–Ω–∫–∞"))
async def send_image(messege:types.Message):
    await bot.send_photo(chat_id=messege.chat.id,
                         photo=config.PHOTO_dota2)
    await messege.delete()


@dp.message()
async def bye(messege:types.Message):
    global count
    if messege.text in config.parting:
        await bot.send_sticker(messege.from_user.id, 
                               sticker=config.STICKER_Before_the_connection)
    if "‚ù§Ô∏è" in messege.text:
        await messege.answer(text="üñ§" * messege.text.count("‚ù§Ô∏è"))
        count = messege.text.count("‚ù§Ô∏è")
        await messege.answer(text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—à–µ–∫ = {count}")

#@dp.message()
#async def send_sticker_id(messege:types.Message):
    #if messege.content_type == messege.sticker:
        #await messege.answer(messege.sticker.file_id)

#@dp.message()
#async def check_count(messege: types.Message):
    #await messege.reply('YES') if '0' in messege.text else await messege.reply('NO')

#@dp.message()
#async def send_random_letter(messege: types.Message):
   #await messege.reply(random.choice(messege.text))


async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == '__main__':
    _asyncio.run(main())